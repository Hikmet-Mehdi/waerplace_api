// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// for all models
// id        String    @unique @default(uuid())
// isActive  Boolean   @map("is_active") @default(false)
// createdAt DateTime  @map("created_at") @default(now())
// updatedAt DateTime  @map("updated_at") @updatedAt

model PropertyType {
  id        String   @unique @default(uuid())
  isActive  Boolean  @default(false) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  description String
  slug        String @unique

  isSku Boolean @default(false) @map("is_sku")

  properies Property[]

  @@map("property_types")
}

model Property {
  id        String   @unique @default(uuid())
  isActive  Boolean  @default(false) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  description String
  slug        String

  propertyType   PropertyType  @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId String        @map("property_type_id")
  skuProperties  SkuProperty[]

  @@map("properties")
}

model Category {
  id        String   @unique @default(uuid())
  isActive  Boolean  @default(false) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  description String
  slug        String

  parentCategoryId String?   @map("parent_category_id")
  parentCategory   Category? @relation(name: "parent_category_relation", fields: [parentCategoryId], references: [id])

  childCategories Category[] @relation(name: "parent_category_relation")

  @@map("categories")
}

model Product {
  id        String   @unique @default(uuid())
  isActive  Boolean  @default(false) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  slug        String

  sku ProductStockKeepingUnit[]

  @@map("products")
}

model ProductStockKeepingUnit {
  id        String   @unique @default(uuid())
  isActive  Boolean  @default(false) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  properties SkuProperty[]

  count Int @default(0)

  @@map("product_stock_keeping_units")
}

model SkuProperty {
  propertyId   String                  @map("property_id")
  property     Property                @relation(fields: [propertyId], references: [id])
  productSkuId String                  @map("product_sku_id")
  productSku   ProductStockKeepingUnit @relation(fields: [productSkuId], references: [id])

  @@unique([productSkuId, propertyId])
  @@map("sku_properties")
}

//
// model Price {
//   id        String   @unique @default(uuid())
//   isActive  Boolean  @default(false) @map("is_active")
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")
//
//   amount Float
// }
